import android.os.Bundle
import android.view.View
import android.widget.Button
import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {

    private var currentPlayer = "X"
    private val board = Array(3) { arrayOfNulls<String>(3) }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        initializeBoard()
    }

    fun onCellClicked(view: View) {
        val button = view as Button
        val row = GridLayout.getRowSpecIndex(button.layoutParams)
        val col = GridLayout.getColumnSpecIndex(button.layoutParams)

        if (button.text.isEmpty()) {
            button.text = currentPlayer
            board[row][col] = currentPlayer
            if (checkWin(row, col)) {
                showWinner(currentPlayer)
            } else if (isBoardFull()) {
                showWinner("Draw")
            } else {
                currentPlayer = if (currentPlayer == "X") "O" else "X"
            }
        }
    }

    private fun initializeBoard() {
        for (i in 0 until gridLayout.rowCount) {
            for (j in 0 until gridLayout.columnCount) {
                val button = gridLayout.getChildAt(i * gridLayout.columnCount + j) as Button
                button.text = ""
                board[i][j] = ""
            }
        }
    }

    private fun checkWin(row: Int, col: Int): Boolean {
        return (checkRow(row) || checkColumn(col) || checkDiagonal() || checkAntiDiagonal())
    }

    private fun checkRow(row: Int): Boolean {
        return (board[row][0] == currentPlayer &&
                board[row][1] == currentPlayer &&
                board[row][2] == currentPlayer)
    }

    private fun checkColumn(col: Int): Boolean {
        return (board[0][col] == currentPlayer &&
                board[1][col] == currentPlayer &&
                board[2][col] == currentPlayer)
    }

    private fun checkDiagonal(): Boolean {
        return (board[0][0] == currentPlayer &&
                board[1][1] == currentPlayer &&
                board[2][2] == currentPlayer)
    }

    private fun checkAntiDiagonal(): Boolean {
        return (board[0][2] == currentPlayer &&
                board[1][1] == currentPlayer &&
                board[2][0] == currentPlayer)
    }

    private fun isBoardFull(): Boolean {
        for (i in 0 until gridLayout.rowCount) {
            val gridLayout = null
            for (j in 0 until gridLayout.columnCount) {
                if (board[i][j].isNullOrEmpty()) {
                    return false
                }
            }
        }
        return true
    }

    private fun showWinner(winner: String) {
        val message = if (winner == "Draw") {
            "It's a draw!"
        } else {
            "Player $winner wins!"
        }
        // Show message (e.g., toast or dialog)
    }
}
